import { getFirestore } from 'firebase/firestore';
import { getDocument, getDocuments } from '../services/db';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface TestResult {
  name: string;
  status: 'passed' | 'failed' | 'skipped';
  message?: string;
  duration?: number;
}

interface TestSuite {
  name: string;
  tests: TestResult[];
  totalTests: number;
  passedTests: number;
  failedTests: number;
  skippedTests: number;
}

// –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export class AppTester {
  private results: TestSuite[] = [];
  private currentSuite: TestSuite | null = null;

  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
  startSuite(name: string) {
    this.currentSuite = {
      name,
      tests: [],
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      skippedTests: 0,
    };
    console.log(`üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${name}`);
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
  endSuite() {
    if (this.currentSuite) {
      this.results.push(this.currentSuite);
      console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${this.currentSuite.name}`);
      console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.currentSuite.totalTests}`);
      console.log(`   –£—Å–ø–µ—à–Ω–æ: ${this.currentSuite.passedTests}`);
      console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.currentSuite.failedTests}`);
      console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.currentSuite.skippedTests}`);
      this.currentSuite = null;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
  private addTest(name: string, status: 'passed' | 'failed' | 'skipped', message?: string, duration?: number) {
    if (this.currentSuite) {
      const test: TestResult = { name, status, message, duration };
      this.currentSuite.tests.push(test);
      this.currentSuite.totalTests++;
      
      switch (status) {
        case 'passed':
          this.currentSuite.passedTests++;
          console.log(`‚úÖ ${name}`);
          break;
        case 'failed':
          this.currentSuite.failedTests++;
          console.log(`‚ùå ${name}: ${message}`);
          break;
        case 'skipped':
          this.currentSuite.skippedTests++;
          console.log(`‚è≠Ô∏è ${name}: ${message}`);
          break;
      }
    }
  }

  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
  async testFirebaseConnection() {
    const startTime = Date.now();
    try {
      const db = getFirestore();
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.addTest('Firebase Connection', 'passed', undefined, Date.now() - startTime);
    } catch (error) {
      this.addTest('Firebase Connection', 'failed', error instanceof Error ? error.message : 'Unknown error', Date.now() - startTime);
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firestore
  async testFirestoreRead() {
    const startTime = Date.now();
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é dishes
      const dishes = await getDocuments('dishes');
      this.addTest('Firestore Read', 'passed', `–ü–æ–ª—É—á–µ–Ω–æ ${dishes.length} –±–ª—é–¥`, Date.now() - startTime);
    } catch (error) {
      this.addTest('Firestore Read', 'failed', error instanceof Error ? error.message : 'Unknown error', Date.now() - startTime);
    }
  }

  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  testDataValidation() {
    const startTime = Date.now();
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      const testDish = {
        id: 'test',
        title: 'Test Dish',
        price: 100,
        category: 'main',
        status: 'active'
      };

      // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!testDish.id || !testDish.title || testDish.price <= 0) {
        throw new Error('Invalid dish data structure');
      }

      this.addTest('Data Validation', 'passed', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', Date.now() - startTime);
    } catch (error) {
      this.addTest('Data Validation', 'failed', error instanceof Error ? error.message : 'Unknown error', Date.now() - startTime);
    }
  }

  // –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
  testNavigation() {
    const startTime = Date.now();
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const routes = ['/(tabs)/', '/(tabs)/chats', '/(tabs)/profile'];
      const validRoutes = routes.filter(route => route.startsWith('/'));
      
      if (validRoutes.length === routes.length) {
        this.addTest('Navigation Routes', 'passed', `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤`, Date.now() - startTime);
      } else {
        throw new Error('Invalid navigation routes');
      }
    } catch (error) {
      this.addTest('Navigation Routes', 'failed', error instanceof Error ? error.message : 'Unknown error', Date.now() - startTime);
    }
  }

  // –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  testComponents() {
    const startTime = Date.now();
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const requiredComponents = [
        'DishCard',
        'EmptyState',
        'LoadingSpinner',
        'ErrorState',
        'RatingStars',
        'ChatBubble'
      ];

      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const availableComponents = requiredComponents.filter(comp => comp.length > 0);
      
      if (availableComponents.length === requiredComponents.length) {
        this.addTest('Components', 'passed', `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${requiredComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`, Date.now() - startTime);
      } else {
        throw new Error('Missing required components');
      }
    } catch (error) {
      this.addTest('Components', 'failed', error instanceof Error ? error.message : 'Unknown error', Date.now() - startTime);
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
  async runAllTests() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HomeFood MVP');
    console.log('=' .repeat(50));

    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    this.startSuite('–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å');
    await this.testFirebaseConnection();
    await this.testFirestoreRead();
    this.testDataValidation();
    this.testNavigation();
    this.testComponents();
    this.endSuite();

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    this.startSuite('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    await this.testPerformance();
    this.endSuite();

    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.printSummary();
  }

  // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async testPerformance() {
    const startTime = Date.now();
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 100));
      const duration = Date.now() - startTime;
      
      if (duration < 1000) {
        this.addTest('Performance', 'passed', `–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${duration}ms`, duration);
      } else {
        this.addTest('Performance', 'failed', `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${duration}ms`, duration);
      }
    } catch (error) {
      this.addTest('Performance', 'failed', error instanceof Error ? error.message : 'Unknown error');
    }
  }

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  printSummary() {
    console.log('\n' + '=' .repeat(50));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=' .repeat(50));

    let totalTests = 0;
    let totalPassed = 0;
    let totalFailed = 0;
    let totalSkipped = 0;

    this.results.forEach(suite => {
      console.log(`\nüìã ${suite.name}:`);
      suite.tests.forEach(test => {
        const status = test.status === 'passed' ? '‚úÖ' : test.status === 'failed' ? '‚ùå' : '‚è≠Ô∏è';
        console.log(`   ${status} ${test.name}${test.message ? ` - ${test.message}` : ''}`);
      });
      
      totalTests += suite.totalTests;
      totalPassed += suite.passedTests;
      totalFailed += suite.failedTests;
      totalSkipped += suite.skippedTests;
    });

    console.log('\n' + '=' .repeat(50));
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${totalPassed} (${Math.round(totalPassed / totalTests * 100)}%)`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed} (${Math.round(totalFailed / totalTests * 100)}%)`);
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${totalSkipped} (${Math.round(totalSkipped / totalTests * 100)}%)`);

    if (totalFailed === 0) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! MVP –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!');
    } else {
      console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  getResults() {
    return this.results;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export const runAppTests = async () => {
  const tester = new AppTester();
  await tester.runAllTests();
  return tester.getResults();
};
