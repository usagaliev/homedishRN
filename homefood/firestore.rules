rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Функции для проверки авторизации
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isChef() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'chef';
    }
    
    function isBuyer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'buyer';
    }
    
    function isOrderParticipant(orderId) {
      let order = get(/databases/$(database)/documents/orders/$(orderId));
      return isAuthenticated() && order != null && 
        (request.auth.uid == order.data.buyerId || request.auth.uid == order.data.chefId);
    }

    // Правила для пользователей
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Не разрешаем удаление пользователей
    }

    // Правила для блюд
    match /dishes/{dishId} {
      allow read: if true; // Все могут читать активные блюда
      allow create: if isAuthenticated() && isChef();
      allow update: if isAuthenticated() && 
        resource.data.chefId == request.auth.uid;
      allow delete: if false; // Не разрешаем удаление, только архивирование
    }

    // Правила для заказов
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.chefId == request.auth.uid);
      allow create: if isAuthenticated() && isBuyer();
      allow update: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.chefId == request.auth.uid);
      allow delete: if false;
      
      // Правила для сообщений в заказе
      match /messages/{messageId} {
        allow read: if isOrderParticipant(orderId);
        allow create: if isOrderParticipant(orderId);
        allow update: if isOrderParticipant(orderId) && 
          (resource.data.senderId == request.auth.uid || 
           request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.buyerId ||
           request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.chefId);
      }
    }

    // Правила для отзывов
    match /reviews/{reviewId} {
      allow read: if true; // Все могут читать отзывы
      allow create: if isAuthenticated() && isBuyer();
      allow update: if isAuthenticated() && 
        resource.data.buyerId == request.auth.uid;
      allow delete: if false;
    }

    // Правила для сессий чата
    match /chat_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.chefId == request.auth.uid);
    }
  }
}
